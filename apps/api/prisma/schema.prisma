// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Document {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  pageContent String
  metadata    String
  sourceId    String @db.ObjectId
  source      Source @relation(fields: [sourceId], references: [id], onDelete: Cascade)
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  name      String?
  password  String?
  chatflows Chatflow[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Chatflow {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  chatflowId String   @unique
  apiKey     String?
  baseUrl    String?
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sources    Source[]
}

enum SourceType {
  WEBSITE
  FILE
  TEXT
}

enum UrlType {
  URL
  FILE
}

type Url {
  url  String
  type UrlType
}

type AutoFetchSetting {
  cronExpression String
  isEnabled      Boolean?
  matchPattern   String?
  excludePattern String?
  filePattern    String?
}

enum SourceStatus {
  CREATED
  PROCESSING
  SYNCED
  ERROR
}

model Source {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  type         SourceType
  text         String?
  urls         Url[]
  rootUrl      String?
  autoFetch    AutoFetchSetting?
  sourceStatus SourceStatus      @default(CREATED)
  file         String?
  chatflowId   String            @db.ObjectId
  chatflow     Chatflow          @relation(fields: [chatflowId], references: [id], onDelete: Cascade)
  lastFetch    DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  documents    Document[]
}
