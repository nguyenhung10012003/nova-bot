// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Document {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  pageContent String
  metadata    String
  sourceId    String   @db.ObjectId
  source      Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  chatflowId  String   @db.ObjectId
  chatflow    Chatflow @relation(fields: [chatflowId], references: [id], onDelete: Cascade)
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  name      String?
  password  String?
  chatflows Chatflow[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Chatflow {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  chatflowId   String        @unique
  apiKey       String?
  baseUrl      String?
  userId       String        @db.ObjectId
  user         User          @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  sources      Source[]
  documents    Document[]
  chatSessions ChatSession[]

  Integration Integration[]
}

enum SourceType {
  WEBSITE
  FILE
  TEXT
}

enum UrlType {
  URL
  FILE
}

type Url {
  url  String
  type UrlType
}

type FetchSetting {
  autoFetch      Boolean?
  cronExpression String?
  matchPattern   String?
  excludePattern String?
  filePattern    String[]
  maxUrlsToCrawl Int?
  maxDepth       Int?
}

enum SourceStatus {
  CREATED
  PROCESSING
  PROCESSED
  SYNCING
  SYNCED
  ERROR
}

type File {
  name     String
  url      String
}

model Source {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  type         SourceType
  text         String[]
  urls         Url[]
  rootUrl      String?
  fetchSetting FetchSetting?
  sourceStatus SourceStatus  @default(CREATED)
  files        File[]
  chatflowId   String        @db.ObjectId
  chatflow     Chatflow      @relation(fields: [chatflowId], references: [id], onDelete: Cascade)
  lastFetch    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  documents    Document[]
}

model ChatSession {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  chatflowId  String        @db.ObjectId
  chatflow    Chatflow      @relation(fields: [chatflowId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  chatMessage ChatMessage[]
}

enum ChatMessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
}

enum ChatMessageStatus {
  CREATED
  SENT
  DELIVERED
  READ
}

enum ChatMessageRecipientType {
  USER
  BOT
}

model ChatMessage {
  id            String                   @id @default(auto()) @map("_id") @db.ObjectId
  chatSessionId String                   @db.ObjectId
  chatSession   ChatSession              @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  type          ChatMessageType
  status        ChatMessageStatus        @default(CREATED)
  recipientType ChatMessageRecipientType
  message       String?
  file          String[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
}

enum IntegrationType {
  FACEBOOK
  TELEGRAM
}

enum IntegrationStatus {
  ENABLED
  DISABLED
}

model Integration {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  accessToken String?
  pageId      String            @unique
  type        IntegrationType
  status      IntegrationStatus @default(ENABLED)
  chatflowId  String            @db.ObjectId
  chatflow    Chatflow          @relation(fields: [chatflowId], references: [id], onDelete: Cascade)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}
